// dropdown box
document.querySelector('.dropbtn').addEventListener('click', function () {
    const dropdown = document.querySelector('.dropdown-content');
    dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
});
document.addEventListener("DOMContentLoaded", function () {
    const dropdown = document.querySelector(".dropdown");
    const dropbtn = document.querySelector(".dropbtn");

    dropbtn.addEventListener("click", function (e) {
        e.stopPropagation(); // NgƒÉn ch·∫∑n s·ª± ki·ªán lan ra ngo√†i
        dropdown.classList.toggle("show"); // Th√™m/x√≥a l·ªõp .show ƒë·ªÉ hi·ªÉn th·ªã/·∫©n dropdown
    });

    // ·∫®n dropdown n·∫øu click b√™n ngo√†i
    document.addEventListener("click", function () {
        dropdown.classList.remove("show");
    });
});
// c·ªßa config///////////////////////////////
const filein = document.getElementById('file-input');
        const prevPageBtn = document.getElementById('prev-page');
        const nextPageBtn = document.getElementById('next-page');
        const pageInfo = document.getElementById('page-info');
        const canvasContainer = document.getElementById('canvas-container');

        let pdfDoc = null;
        let currentPage = 1;
        let totalPages = 0;

        // L·∫Øng nghe s·ª± ki·ªán khi ng∆∞·ªùi d√πng ch·ªçn file
        filein.addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (file && file.type === 'application/pdf') {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const typedarray = new Uint8Array(e.target.result);
                    pdfjsLib.getDocument(typedarray).promise.then(function(pdf) {
                        pdfDoc = pdf;
                        totalPages = pdf.numPages;
                        currentPage = 1;
                        showPage(currentPage);
                    }).catch(function(error) {
                        console.error('L·ªói khi t·∫£i PDF:', error);
                    });
                };
                reader.readAsArrayBuffer(file);
            } else {
                alert('Vui l√≤ng ch·ªçn m·ªôt file PDF.');
            }
        });

        // H√†m hi·ªÉn th·ªã m·ªôt trang c·ªßa PDF d∆∞·ªõi d·∫°ng h√¨nh ·∫£nh
        function showPage(pageNum) {
            pdfDoc.getPage(pageNum).then(function(page) {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                const scale = 1.5; // T·ªâ l·ªá ph√≥ng ƒë·∫°i ƒë·ªÉ hi·ªÉn th·ªã r√µ h∆°n
                const viewport = page.getViewport({ scale: scale });

                // ƒê·∫∑t k√≠ch th∆∞·ªõc canvas ph√π h·ª£p v·ªõi k√≠ch th∆∞·ªõc trang PDF
                canvas.width = viewport.width;
                canvas.height = viewport.height;
                canvasContainer.innerHTML = ''; // X√≥a c√°c canvas c≈© tr∆∞·ªõc khi hi·ªÉn th·ªã trang m·ªõi
                canvasContainer.appendChild(canvas);

                // V·∫Ω trang PDF l√™n canvas
                page.render({ canvasContext: ctx, viewport: viewport }).promise.then(function() {
                    // C·∫≠p nh·∫≠t th√¥ng tin v·ªÅ trang
                    pageInfo.textContent = `Trang ${currentPage} / ${totalPages}`;
                });
            });
        }

        // ƒêi·ªÅu khi·ªÉn chuy·ªÉn trang
        prevPageBtn.addEventListener('click', function() {
            if (currentPage > 1) {
                currentPage--;
                showPage(currentPage);
            }
        });

        nextPageBtn.addEventListener('click', function() {
            if (currentPage < totalPages) {
                currentPage++;
                showPage(currentPage);
            }
        });


// c·ªßa upload file//////////////////////////////
// L·∫•y c√°c ph·∫ßn t·ª≠ c·∫ßn thi·∫øt
const fileInput = document.getElementById('fileInput');
const fileListContainer = document.getElementById('fileListContainer');
const fileNameText = document.getElementById('fileNameText');

// ƒê·ªÉ token tr·ª±c ti·∫øp trong m√£ (ƒë·∫£m b·∫£o token h·ª£p l·ªá)
const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3NGYyMjgzNTdjMjdjMWVkZTliNDdiZSIsInVzZXJuYW1lIjoibmV3dXNlciIsImlhdCI6MTczMzQwMDkzOCwiZXhwIjoxNzMzNDg3MzM4fQ.FTFs3rPr7F0krqXkSDCc7KdbgkoTIiOZbT99JGhlZxc";

// L·∫•y danh s√°ch c√°c file ƒë√£ t·∫£i l√™n
function fetchFileList() {
fetch('http://localhost:3000/file', {
    method: 'GET',
    headers: {
        'Authorization': `Bearer ${token}`, // Token tr·ª±c ti·∫øp trong m√£
    },
})
.then(response => {
    if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server ho·∫∑c API tr·∫£ v·ªÅ l·ªói!');
    }
    return response.json();
})
.then(data => {
    console.log('D·ªØ li·ªáu t·ª´ server:', data);
    if (Array.isArray(data)) {
        renderFileList(data); // Tr∆∞·ªùng h·ª£p server tr·∫£ v·ªÅ m·∫£ng
    } else 
    // if (data.success) {
    //     renderFileList(data.files); // Tr∆∞·ªùng h·ª£p server tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng
    // } 
    //else 
    {
        alert('Kh√¥ng th·ªÉ l·∫•y danh s√°ch file! L·ªói t·ª´ API: ' + (data.message || 'Kh√¥ng r√µ'));
    }
})
.catch(err => {
    console.error('L·ªói:', err);
    alert('ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch file: ' + err.message);
});
}

function renderFileList(files) {
// fileListContainer.innerHTML = ''; // X√≥a danh s√°ch c≈©

if (!files || files.length === 0) {
    fileListContainer.innerHTML = '<p>Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n.</p>';
    return;
}

files.forEach(file => {
    const fileItem = document.createElement('div');
    fileItem.className = 'file-item';
    fileItem.innerHTML = `
        <span>${file.filename} (${(file.size / 1024).toFixed(2)} KB)</span>
        <a href="../homePage/config.html">
            <button style="cursor: pointer;">üñ®Ô∏è</button>
        </a>
        <button onclick="deleteFile('${file._id}')">&#128465</button>
    `;
    fileListContainer.appendChild(fileItem);
});
}

function deleteFile(fileId) {
fetch(`http://localhost:3000/file/${fileId}`, {
    method: 'DELETE',
    headers: {
        'Authorization': `Bearer ${token}`, // Token h·ª£p l·ªá
    },
})
.then(response => {if (!response.ok) {
    throw new Error(`L·ªói khi x√≥a file: ${response.status}`);
}
return response.json();})
.then(data => {
    if (data.success) {
        alert('Kh√¥ng th·ªÉ x√≥a file! L·ªói t·ª´ API: ' + data.message);
    } else {
        alert('X√≥a file th√†nh c√¥ng!');
        fetchFileList(); // C·∫≠p nh·∫≠t danh s√°ch file
    }
})
.catch(err => {
    console.error('L·ªói:', err);
    alert('ƒê√£ c√≥ l·ªói x·∫£y ra khi x√≥a file: ' + err.message);
});
}

// L·∫Øng nghe s·ª± ki·ªán khi ng∆∞·ªùi d√πng ch·ªçn file
fileInput.addEventListener('change', function () {
const files = fileInput.files;

if (files.length === 0) {
    fileNameText.textContent = 'Kh√¥ng t·ªáp n√†o ƒë∆∞·ª£c ch·ªçn';
    alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt file!');
    return;
}

fileNameText.textContent = `${files.length} t·ªáp ƒë√£ ch·ªçn`;

Array.from(files).forEach(file => {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('filename', file.name);
    formData.append('size', file.size);
    formData.append('contentType', file.type);

    fetch('http://localhost:3000/file/upload', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${token}`, // D√πng token tr·ª±c ti·∫øp trong m√£
        },
        body: formData,
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert(`T·∫£i file "${file.name}" th√†nh c√¥ng!`);
            fetchFileList(); // C·∫≠p nh·∫≠t danh s√°ch file
        } else {
            alert(`L·ªói: ${data.message}`);
        }
    })
    .catch(err => console.error('L·ªói:', err));
});
});

// T·∫£i file l√™n khi ng∆∞·ªùi d√πng nh·∫•n n√∫t
document.getElementById('uploadButton').addEventListener('click', function () {
fileInput.click(); // M·ªü h·ªôp tho·∫°i ch·ªçn file
});

// G·ªçi h√†m ƒë·ªÉ t·∫£i danh s√°ch file ngay khi trang ƒë∆∞·ª£c t·∫£i
document.addEventListener('DOMContentLoaded', fetchFileList);